/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2023-01-09 09:30:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n");
      out.write("<body>\n");
      out.write("<h1>this is a web hook example</h1>\n");
      out.write("<h1>This change should be deployed automatically</h1>\n");
      out.write("<h1>Trigger the job again<h1>\n");
      out.write("<h1>This is a webhooks example</h1>\n");
      out.write("<h1>Distributed build example</h1>\n");
      out.write("<h1>Declaratrive piupeline example</h1>\n");
      out.write("<h1>Example for hjenkins pipeline</h1>\n");
      out.write("<h1>This will trigger jenkins job</h1>\n");
      out.write("<h1>another change</h1>\n");
      out.write("<h1>Another trigger</h1>\n");
      out.write("<h1>Jenkins pipeline example</h1>\n");
      out.write("<h1>Some more changes</h1>\n");
      out.write("<h1>This is atest change</h1>\n");
      out.write("<h1>Crweated dockerfile</h1>\n");
      out.write("<h2>Changes for central repo</h2>\n");
      out.write("anotehr change from local repo\n");
      out.write("this is ach== change from local repo\n");
      out.write("another hcange\n");
      out.write("<h1>Test change</h1>\n");
      out.write("<h2>Hello World!</h2>\n");
      out.write("<h2>This change should trigger the jenkins job</h2>\n");
      out.write("<h2>New change</h2>\n");
      out.write("<h3>This change should be deployed to the tomcat</h2>\n");
      out.write("<h2>This change should trigger the jenkins jobs</h2>\n");
      out.write("<h2>Test</h2>\n");
      out.write("  <h2>Another test</h2>\n");
      out.write("<h2>This is achange from the local repo</h2>\n");
      out.write("<h1>This is a test</h1>\n");
      out.write("<h1>another test</h1>\n");
      out.write("<h1>New change</h1>\n");
      out.write("<h1>New change to deploy</h1>\n");
      out.write("\n");
      out.write("<h1>This wil teigger the jenkins job ------ 111111</h1>\n");
      out.write("\n");
      out.write("\n");
      out.write("<h1>This will create a new build and deploy</h1>\n");
      out.write("\n");
      out.write("<h1>Trigger the build job</h1>\n");
      out.write("\n");
      out.write("<h1>This will triggr jenkins job</h1>\n");
      out.write("<h1>Some random chnage</h1>\n");
      out.write("<h1>This is job 1</h1>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
